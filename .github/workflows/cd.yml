name: Build and Push Docker Image to ECR

on:
   push:
      branches:
         - develop

jobs:
   build-and-push:
      if: github.ref == 'refs/heads/develop'
      name: Build and Push Docker Image to ECR
      runs-on: ubuntu-latest
      timeout-minutes: 15

      steps:
         - name: Checkout code
           uses: actions/checkout@v3

         - name: Set up QEMU
           uses: docker/setup-qemu-action@v2

         - name: Set up Docker Buildx
           uses: docker/setup-buildx-action@v2

         - name: Configure AWS credentials
           uses: aws-actions/configure-aws-credentials@v2
           with:
              aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
              aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              aws-region: ${{ secrets.AWS_REGION }}

         - name: Log in to Amazon ECR
           id: login-ecr
           uses: aws-actions/amazon-ecr-login@v2
           with:
              registry-type: private

         - name: Extract ECR repository URI
           id: ecr
           run: |
              echo "Attempting to describe ECR repository: ${{ secrets.ECR_REPOSITORY_DEV }}"
              if [ -z "${{ secrets.ECR_REPOSITORY_DEV }}" ]; then
                echo "Error: ECR_REPOSITORY_DEV secret is empty"
                exit 1
              fi
              uri=$(aws ecr describe-repositories --repository-names "${{ secrets.ECR_REPOSITORY_DEV }}" --region "${{ secrets.AWS_REGION }}" --query 'repositories[0].repositoryUri' --output text)
              if [ $? -ne 0 ]; then
                echo "Error: Failed to describe ECR repository"
                exit 1
              fi
              if [ -z "$uri" ]; then
                echo "Error: ECR repository URI is empty"
                exit 1
              fi
              echo "uri=$uri" >> $GITHUB_ENV
              echo "Extracted ECR URI: $uri"

         - name: Get Secrets from AWS Secrets Manager
           id: get-secrets
           run: |
              secret=$(aws secretsmanager get-secret-value --secret-id ${{ secrets.AWS_SECRET_MANAGER_SECRET_DEV }} --query SecretString --output text)
              echo "$secret" | jq -r 'to_entries | map("\(.key)=\(.value|tostring)") | .[]' > .env

         - name: Debug ENV_FILE
           run: |
              echo "ENV_FILE value: ${{ env.ENV_FILE }}"
              echo "Contents of .env file:"
              cat .env

         - name: Build, Tag, and Push Docker image
           id: build-image
           run: |
              echo "Building Docker image"
              docker build -t ${{ env.uri }}:latest .
              echo "Pushing Docker image to ${{ env.uri }}:latest"
              docker push ${{ env.uri }}:latest
              echo "image=${{ env.uri }}:latest" >> $GITHUB_OUTPUT

         - name: Download current ECS task definition
           id: download-task-def
           run: |
              aws ecs describe-task-definition --task-definition ${{ secrets.ECS_TASK_DEFINITION_DEV }} --region ${{ secrets.AWS_REGION }} --query 'taskDefinition' > task-definition.json

         - name: Update image in ECS task definition
           id: update-task-def
           run: |
              # Remover o digest da imagem antiga
              jq '.containerDefinitions[].image |= split("@")[0]' task-definition.json > task-definition-no-digest.json

              # Atualizar a imagem para a nova
              jq --arg image "${{ steps.build-image.outputs.image }}" '.containerDefinitions[0].image = $image' task-definition-no-digest.json > updated-task-definition.json

              # Remover campos desnecessários
              jq 'del(.taskDefinitionArn, .revision, .status, .registeredAt, .registeredBy, .requiresAttributes, .compatibilities)' updated-task-definition.json > final-task-definition.json

              # Substituir o arquivo de definição da task
              mv final-task-definition.json updated-task-definition.json

         - name: Register new ECS task definition
           id: register-task-def
           run: |
              TASK_DEFINITION_ARN=$(aws ecs register-task-definition --cli-input-json file://updated-task-definition.json --region ${{ secrets.AWS_REGION }} --query 'taskDefinition.taskDefinitionArn' --output text)
              echo "TASK_DEFINITION_ARN=$TASK_DEFINITION_ARN" >> $GITHUB_ENV

         - name: Log out of Amazon ECR
           run: |
              docker logout ${{ env.uri }}
