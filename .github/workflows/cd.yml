name: Continuous Deployment

on:
   push:
      branches:
         - feat/rafael/ci-cd-vps
         - main

jobs:
   deploy:
      name: Deploy to VPS
      runs-on: self-hosted
      timeout-minutes: 30
      steps:
         - name: Checkout Code
           uses: actions/checkout@v3
           with:
              fetch-depth: 0

         - name: Setup Node
           uses: actions/setup-node@v3
           with:
              node-version: 23

         - name: Setup pnpm
           uses: pnpm/action-setup@v2
           with:
              version: 8
              run_install: false

         - name: Get pnpm store directory
           id: pnpm-cache
           shell: bash
           run: |
              echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

         - name: Setup pnpm cache
           uses: actions/cache@v3
           with:
              path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
              key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
              restore-keys: |
                 ${{ runner.os }}-pnpm-store-

         - name: Check system resources
           run: |
              echo "Operating system: $(uname -a)"
              echo "Node.js version: $(node -v)"
              echo "PNPM version: $(pnpm -v)"
              echo "Current directory: $(pwd)"
              echo "Deployment started at: $(date)"
              echo "Available memory: $(free -h || echo 'free command not available')"
              echo "Disk space: $(df -h || echo 'df command not available')"
              echo "CPU info: $(lscpu || echo 'lscpu command not available')"

         - name: Pull Latest Code
           run: |
              git fetch --all
              git reset --hard origin/${{ github.ref_name }}
              git pull

         - name: Set .env
           run: |
              if [ -n "${{ secrets.ENV_PROD }}" ]; then
                echo "${{ secrets.ENV_PROD }}" > .env
              else
                echo "Error: ENV_PROD secret is not configured. Set it in Settings > Secrets and variables > Actions"
                exit 1
              fi

         - name: Install Dependencies
           id: install
           continue-on-error: true
           run: pnpm install --no-frozen-lockfile

         - name: Retry Install on Failure
           if: steps.install.outcome == 'failure'
           run: |
              echo "First attempt failed, cleaning cache and reinstalling..."
              pnpm store prune
              pnpm install --no-frozen-lockfile

         - name: Clear Next.js cache
           run: |
              rm -rf .next
              rm -rf node_modules/.cache

         - name: Build Application with Debug
           run: |
              echo "Starting build with increased memory limit..."
              export NODE_OPTIONS="--max-old-space-size=4096"
              pnpm run build
           timeout-minutes: 15

         - name: Ensure PM2 is installed
           run: |
              if ! command -v pm2 &> /dev/null; then
                npm install -g pm2
              fi

         - name: Kill processes in port 3000
           run: |
              if command -v lsof &> /dev/null; then
                sudo kill -9 $(sudo lsof -t -i:3000) || echo "No process to kill"
              else
                echo "lsof not found, trying alternative..."
                sudo fuser -k 3000/tcp || echo "No process to kill"
              fi

         - name: Restart Application
           run: |
              pm2 delete "deScier Platform" || echo "No process to delete"
              pm2 start --name "deScier Platform" pnpm -- start

         - name: Save PM2 process list
           run: pm2 save

         - name: Verify Deployment
           run: |
              echo "Waiting for application to start..."
              sleep 5

              HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000 || echo "000")
              if [ "$HTTP_CODE" = "200" ] || [ "$HTTP_CODE" = "301" ] || [ "$HTTP_CODE" = "302" ]; then
                echo "Application is responding with status $HTTP_CODE"
              else
                echo "Application is not responding properly. Status: $HTTP_CODE"
                echo "Continuing anyway..."
              fi

         - name: Deployment Status
           run: |
              echo "âœ… Deployment completed for ${{ github.ref_name }} at $(date)"
